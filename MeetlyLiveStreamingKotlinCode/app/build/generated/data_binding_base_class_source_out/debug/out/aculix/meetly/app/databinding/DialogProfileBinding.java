// Generated by view binder compiler. Do not edit!
package aculix.meetly.app.databinding;

import aculix.meetly.app.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogProfileBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View dividerDarkMode;

  @NonNull
  public final View dividerOpenSourceLicenses;

  @NonNull
  public final Guideline glEnd;

  @NonNull
  public final Guideline glStart;

  @NonNull
  public final TextView tvAppNme;

  @NonNull
  public final MaterialTextView tvFAQ;

  @NonNull
  public final MaterialTextView tvProfile;

  @NonNull
  public final MaterialTextView tvPushNotification;

  @NonNull
  public final MaterialTextView tvRateApp;

  @NonNull
  public final MaterialTextView tvSendFeedback;

  @NonNull
  public final MaterialTextView tvSettings;

  @NonNull
  public final MaterialTextView tvTermsandCondn;

  private DialogProfileBinding(@NonNull ConstraintLayout rootView, @NonNull View dividerDarkMode,
      @NonNull View dividerOpenSourceLicenses, @NonNull Guideline glEnd, @NonNull Guideline glStart,
      @NonNull TextView tvAppNme, @NonNull MaterialTextView tvFAQ,
      @NonNull MaterialTextView tvProfile, @NonNull MaterialTextView tvPushNotification,
      @NonNull MaterialTextView tvRateApp, @NonNull MaterialTextView tvSendFeedback,
      @NonNull MaterialTextView tvSettings, @NonNull MaterialTextView tvTermsandCondn) {
    this.rootView = rootView;
    this.dividerDarkMode = dividerDarkMode;
    this.dividerOpenSourceLicenses = dividerOpenSourceLicenses;
    this.glEnd = glEnd;
    this.glStart = glStart;
    this.tvAppNme = tvAppNme;
    this.tvFAQ = tvFAQ;
    this.tvProfile = tvProfile;
    this.tvPushNotification = tvPushNotification;
    this.tvRateApp = tvRateApp;
    this.tvSendFeedback = tvSendFeedback;
    this.tvSettings = tvSettings;
    this.tvTermsandCondn = tvTermsandCondn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dividerDarkMode;
      View dividerDarkMode = rootView.findViewById(id);
      if (dividerDarkMode == null) {
        break missingId;
      }

      id = R.id.dividerOpenSourceLicenses;
      View dividerOpenSourceLicenses = rootView.findViewById(id);
      if (dividerOpenSourceLicenses == null) {
        break missingId;
      }

      id = R.id.glEnd;
      Guideline glEnd = rootView.findViewById(id);
      if (glEnd == null) {
        break missingId;
      }

      id = R.id.glStart;
      Guideline glStart = rootView.findViewById(id);
      if (glStart == null) {
        break missingId;
      }

      id = R.id.tv_app_nme;
      TextView tvAppNme = rootView.findViewById(id);
      if (tvAppNme == null) {
        break missingId;
      }

      id = R.id.tvFAQ;
      MaterialTextView tvFAQ = rootView.findViewById(id);
      if (tvFAQ == null) {
        break missingId;
      }

      id = R.id.tvProfile;
      MaterialTextView tvProfile = rootView.findViewById(id);
      if (tvProfile == null) {
        break missingId;
      }

      id = R.id.tvPushNotification;
      MaterialTextView tvPushNotification = rootView.findViewById(id);
      if (tvPushNotification == null) {
        break missingId;
      }

      id = R.id.tvRateApp;
      MaterialTextView tvRateApp = rootView.findViewById(id);
      if (tvRateApp == null) {
        break missingId;
      }

      id = R.id.tvSendFeedback;
      MaterialTextView tvSendFeedback = rootView.findViewById(id);
      if (tvSendFeedback == null) {
        break missingId;
      }

      id = R.id.tvSettings;
      MaterialTextView tvSettings = rootView.findViewById(id);
      if (tvSettings == null) {
        break missingId;
      }

      id = R.id.tvTermsandCondn;
      MaterialTextView tvTermsandCondn = rootView.findViewById(id);
      if (tvTermsandCondn == null) {
        break missingId;
      }

      return new DialogProfileBinding((ConstraintLayout) rootView, dividerDarkMode,
          dividerOpenSourceLicenses, glEnd, glStart, tvAppNme, tvFAQ, tvProfile, tvPushNotification,
          tvRateApp, tvSendFeedback, tvSettings, tvTermsandCondn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
